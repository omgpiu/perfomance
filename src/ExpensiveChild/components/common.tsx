import React, { memo } from 'react';

export const CARD_TEXT = {
    freeze: 'В этом кейсе нет никаких оберток, у нас выполняется синхронный блокирующий код, из-за рендера родителя, этот\n' +
        '        компонент так же перерендиривается. Ререндер не проблема, проблема если запускаются тяжелые вычисления.',
    memo: 'Тут тот же самый компонент, но он не перерендеревается вслед за родителем.\n' +
        '        Мы видим, что происходит\n' +
        '        ререндер родителя,обернув компонент с вычеслениями в мемо',
    no_memo: 'Как же мы решили проблему с рередером? Стейт, который отвечает за value инпута был убран с родителя и перенесен\n' +
        '        в отдельный компонент с инпутом. Теперь родитель не ререндерится, а значит и тяжелый компонент находится в\n' +
        '        безопасности от лишней работы.',
    children: 'Мы создали обертку со стейтом и инпутом, куда поместили наш тяжелый компонент.\n' +
        '      Если компонент-обертка с children ререндерится, это не значит, что будут перерендерены children. Как видим,\n' +
        '      обертка\n' +
        '      ререндерится, а внутренности нет.'
};


const PayloadComponent = () => {
    let now = performance.now();
    while (performance.now() - now < 150) {
        //delay for doing nothing
    }
    return <div className='pay-load'>
        Я делаю важную работу и сложную работу...
    </div>;
};
const MemoPayloadComponent = memo(() => <PayloadComponent/>);
export const HiLoadComponent = ({memo}: { memo?: boolean }) => {
    return memo ? <MemoPayloadComponent/> : <PayloadComponent/>;
};

